// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  profile       UserProfile?
  meals         Meal[]
  progressLogs  ProgressLog[]
  mealPlans     MealPlan[]
  shoppingLists ShoppingList[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
model UserProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  age                 Int?
  gender              String?  // Values: "MALE", "FEMALE", "OTHER"
  height              Float?   // in cm
  weight              Float?   // in kg
  activityLevel       String   @default("SEDENTARY") // Values: "SEDENTARY", "LIGHTLY_ACTIVE", "MODERATELY_ACTIVE", "VERY_ACTIVE", "EXTREMELY_ACTIVE"
  goal                String   @default("MAINTAIN")  // Values: "LOSE", "MAINTAIN", "GAIN"
  dietaryRestrictions String?  // JSON string array
  healthConditions    String?  // JSON string array
  bmr                 Float?
  tdee                Float?
  targetCalories      Float?
  targetProtein       Float?
  targetCarbs         Float?
  targetFat           Float?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Food {
  id               String @id @default(cuid())
  name             String @unique
  category         String
  caloriesPer100g  Float
  proteinPer100g   Float
  carbsPer100g     Float
  fatPer100g       Float
  fiberPer100g     Float?
  sugarPer100g     Float?
  sodiumPer100g    Float?
  potassiumPer100g Float?
  calciumPer100g   Float?
  ironPer100g      Float?
  vitaminCPer100g  Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  mealItems      MealItem[]
  recipeItems    RecipeItem[]
  shoppingItems  ShoppingListItem[]

  @@map("foods")
}

model Recipe {
  id            String       @id @default(cuid())
  name          String
  description   String?
  instructions  String
  servings      Int          @default(1)
  prepTime      Int?         // minutes
  cookTime      Int?         // minutes
  difficulty    String?      // "EASY", "MEDIUM", "HARD"
  cuisine       String?
  tags          String?      // JSON string array
  calories      Float?
  protein       Float?
  carbs         Float?
  fat           Float?
  fiber         Float?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  items         RecipeItem[]
  mealPlanItems MealPlanItem[]

  @@map("recipes")
}

model RecipeItem {
  id       String @id @default(cuid())
  recipeId String
  foodId   String
  quantity Float  // in grams

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  food   Food   @relation(fields: [foodId], references: [id])

  @@map("recipe_items")
}

model Meal {
  id        String     @id @default(cuid())
  userId    String
  date      DateTime
  type      String     // Values: "BREAKFAST", "LUNCH", "DINNER", "SNACK"
  name      String?
  calories  Float?
  protein   Float?
  carbs     Float?
  fat       Float?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     MealItem[]

  @@map("meals")
}

model MealItem {
  id       String @id @default(cuid())
  mealId   String
  foodId   String
  quantity Float  // in grams

  meal Meal @relation(fields: [mealId], references: [id], onDelete: Cascade)
  food Food @relation(fields: [foodId], references: [id])

  @@map("meal_items")
}

model MealPlan {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items MealPlanItem[]

  @@map("meal_plans")
}

model MealPlanItem {
  id         String @id @default(cuid())
  mealPlanId String
  recipeId   String?
  day        Int    // 0-6 (Sunday to Saturday)
  mealType   String // Values: "BREAKFAST", "LUNCH", "DINNER", "SNACK"
  servings   Float  @default(1)

  mealPlan MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  recipe   Recipe?  @relation(fields: [recipeId], references: [id])

  @@map("meal_plan_items")
}

model ProgressLog {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  weight    Float?
  bodyFat   Float?
  muscle    Float?
  notes     String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("progress_logs")
}

model ShoppingList {
  id        String   @id @default(cuid())
  userId    String
  name      String
  notes     String?
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  items ShoppingListItem[]

  @@map("shopping_lists")
}

model ShoppingListItem {
  id             String @id @default(cuid())
  shoppingListId String
  foodId         String
  quantity       Float
  unit           String @default("g")
  obtained       Boolean @default(false)
  notes          String?

  food         Food         @relation(fields: [foodId], references: [id])
  shoppingList ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)

  @@map("shopping_list_items")
}